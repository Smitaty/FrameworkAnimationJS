
Fonctionnalités
===============

Un fichier XML contient la description d'un dessin ainsi qu'un programme défini par des actions correspondantes à des animations des objets du dessin

Les objets n'ont pas de coordonnées au début. C'est le programme qui donne les coordonnées de chaque objet. Une instruction du programme est explicitement assignée à un objet.

Actions possibles dans le programme :
- Déplacer un élément, le rendre visible, le faire attendre, clignoter, déclencher un objet avec <click/> et trigger
- Changer les autres valeurs d'un attribut d'un élément (couleur, texte, position) avec l'objet XML <setproperty object="" property="" value="" />

Technique
=========

Parsing de fichier XML :

var parser = new DOMParser();
var xmlDoc = parser.parseFromString(fichier ,"text/xml");
while (xmlDoc.getElementsByTagName("note")[i]) {
	...
}

P5.js permet de dessiner des figures. Les figures ne sont pas des éléments HTML récupérables.

P5.js : La fonction draw() dessine des objets (ellipse, line, ...). C'est une boucle. Les figures doivent donc êtres enregistrées dans un tableau.

XML : les programmes (associés à un objet du dessin) sont à exécuter en parallèle. Il faut donc lire tous les programmes, les enregistrer dans un tableau sous forme d'instructions, et les exécuter en même temps.

Point d'ancrage des objets de dessin fournis par P5.js :
- canevas		en haut à gauche
- ellipse		centre de l'objet
- arc			centre de l'objet
- rect			en haut à gauche de l'objet
- text			en bas à gauche de la ligne de base de l'objet
Les coordonnées données dans le XML (attributs x et y) correspondent au point en bas à gauche de la boîte rectangulaire entourant l'objet.

Conventions
===========

Tout en anglais (commentaires, nom des classes et des méthodes, nom des variables, ...)
Nom des classes : CamelCase
Nom des méthodes : lowerCamelCase
Nom des fonctions et variables : snake_case, explicites, HIGHER pour les variables globales
Tabulations : TAB
Un espace après une virgule, un point virgule, une parenthèse fermante, un mot-clé, avant et après un opérateur de comparaison
Ouverture du bloc sur la même ligne que son instruction

Exemple :
class MyClass {
	firstMethod(arg1, arg2) {
		for (var i = 0; i < some_vector.length; ++i) {
			// Some instructions
		}
	}
}

Changements effectués
=====================

Les feuilles de style sont désormais dans le dossier css : <link rel="stylesheet" type="text/css" href="css/css.css" />
Il faut inclure le script animation.js dans chaque page contenant une animation : <script src="js/animation.js"></script>
Pour charger une animation (charger un fichier XML, afficher les objets, lancer le programme) : load_animation("animation.xml", "target_node_id", <width>, <height>);

Ajout règles dans le fichier css/css.css.

On considère que tous les objets peuvent avoir une couleur de bordure.

L'attribut "transparency" est remplacé par "bgtransparent" pour tous les objets.
L'attribut "fgcolor" est renommé par "color" pour l'objet texte (rgb(0, 0, 0) par défaut), et par "bocolor" pour les autres objets.

Les propriétés suivantes ont été ajoutées pour tous les objets :
- visible (true|false, false par défaut) : l'objet est visible
- bgtransparent (true|false, true par défaut) : le background est transparent (anciennement "transparency")
- botransparent (true|false, true par défaut) : la bordure est transparente
- opacity (nombre entre 0 et 1, 1 par défaut) : l'opacité de l'objet, utile lorsque des objets se superposent
- angle (nombre, 0 par défaut) : la rotation de l'objet, angle exprimé en degrés
 
La couleur par défaut de tous les objets a été modifiée :
- bgcolor (couleur de l'arrière plan) : rgb(0, 0, 0) par défaut
- bocolor (couleur de la bordure) : rgb(0, 0, 0) par défaut

Les propriétés suivantes ont été ajoutées pour l'objet texte :
- width (entier supérieur à 0, 100 par défaut) : largeur de la boite contenant le texte
- height (entier supérieur à 0, 20 par défaut) : hauteur de la boite contenant le texte
- halignment (left|center|right, left par défaut) : alignement horizontal du texte
- valignment (top|bottom|center|baseline, top par défaut) : alignement vertical du texte

La propriété suivante a été ajoutée pour l'objet rectangle :
- round (entiers supérieurs à 0, "0, 0, 0, 0" par défaut) : rayon du congé des coins du rectangle (haut gauche, haut droit, bas gauche, bas droit)

Ces propriétés de l'objet image ont été modifiées :
- width (largeur de l'image) : 100 par défaut
- height (hauteur de l'image) : 100 par défaut

Les objets suivants ont été ajoutés :
- Landmark (repère) : width, height, scaleX, scaleY, unitX, unitY, et les attributs communs aux objets

Toutes les propriétés peuvent être données lors de la création de l'objet et modifiées avec l'instruction <setproperty>
(hormis la propriété "state" qui est modifiable avec des instructions spécifiques).

L'état par défaut d'un objet du dessin est "normal". Il peut être "sleeping", "waiting_click", "moving", ou l'état donné par une instruction <wait>.
L'instruction <click> est gérée de la façon suivante : l'état de l'objet devient "waiting_click" ; lorsqu'un objet est cliqué, une instruction trigger est créée et exécutée avec la value "waiting_click".
Les instructions <label>, <goto>, <stop> sont propre à l'exécution du programme, elles n'agissent pas directement sur l'objet auquel le programme est associé.

Le noeud <framerate> permet de changer la vitesse de rafraichissement du dessin : "very slow", "slow", "normal" (défaut), "fast", "very fast". DTD mise à jour en conséquence.

La DTD a été mise à jour en conséquence.

<dupl_bject>

Résumé
======

Une animation est décrite en XML par des objets de dessin et au maximum un programme associé à chaque objet.
Il faut lire ce XML, afficher les objets de dessin et executer les programmes.

Le framework P5.js permet de dessiner des figures. Les figures ne sont pas des éléments HTML récupérables, et sont dessinés à chaque itération du canevas.
Il faut donc un tableau de figures.

Les programmes de chaque objet de dessin sont à exécuter en parallèle, mais leurs instructions sont séquentielles.
Il faut donc un tableau de programmes.

Ainsi, nous avons une classe par objet et par intruction, comme la version orginale codée en Java.
Un programme principal lit un XML donné et met les objets du dessin dans un tableau associatif (identifiant : Object), ainsi que les programmes dans un tableau associatif (identifiant : Program).
Les objets sont capable de se dessiner (en une méthode qui sera appelée par le programme principal), en appelant les fonctions de dessin de p5.js.

<cf Changements effectués>
