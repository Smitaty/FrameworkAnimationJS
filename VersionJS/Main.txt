
Fonctionnalités
===============

Un fichier XML contient la description d'un dessin ainsi qu'un programme défini par des actions correspondantes à des animations des objets du dessin

Les objets n'ont pas de coordonnées au début. C'est le programme qui donne les coordonnées de chaque objet. Une instruction du programme est explicitement assignée à un objet.

Actions possibles dans le programme :
- Déplacer un élément, le rendre visible, le faire attendre, clignoter, déclencher un objet avec <click/> et trigger
- Changer les autres valeurs d'un attribut d'un élément (couleur, texte, position) avec l'objet XML <setproperty object="" property="" value="" />

Technique
=========

Parsing de fichier XML :

var parser = new DOMParser();
var xmlDoc = parser.parseFromString(fichier ,"text/xml");
while (xmlDoc.getElementsByTagName("note")[i]) {
	...
}

P5.js permet de dessiner des figures. Les figures ne sont pas des éléments HTML récupérables.

P5.js : La fonction draw() dessine des objets (ellipse, line, ...). C'est une boucle. Les figures doivent donc êtres enregistrées dans un tableau.

XML : les programmes (associés à un objet du dessin) sont à exécuter en parallèle. Il faut donc lire tous les programmes, les enregistrer dans un tableau sous forme d'instructions, et les exécuter en même temps.

Point d'ancrage des objets de dessin fournis par P5.js :
- canevas		en haut à gauche
- ellipse		centre de l'objet
- arc			centre de l'objet
- rect			en haut à gauche de l'objet
- text			en haut à gauche de la ligne de base de l'objet
Les coordonnées données dans le XML (attributs x et y) correspondent au point en bas à gauche de la boîte rectangulaire entourant l'objet.

Conventions
===========

Tout en anglais (commentaires, nom des classes et des méthodes, nom des variables, ...)
Nom des classes : CamelCase
Nom des méthodes : lowerCamelCase
Nom des fonctions et variables : snake_case, explicites, HIGHER pour les variables globales
Tabulations : TAB
Un espace après une virgule, un point virgule, une parenthèse fermante, un mot-clé, avant et après un opérateur de comparaison
Ouverture du bloc sur la même ligne que son instruction

Exemple :
class MyClass {
	firstMethod(arg1, arg2) {
		for (var i = 0; i < some_vector.length; ++i) {
			// Some instructions
		}
	}
}

Changements effectués
=====================

Voir le compte rendu

Précisions
==========

Les feuilles de style sont désormais dans le dossier css : <link rel="stylesheet" type="text/css" href="css/css.css" />
Il faut inclure le script animation_controller.js dans chaque page contenant une animation : <script src="js/animation_controller.js"></script>
Pour charger une animation (charger un fichier XML, afficher les objets, lancer le programme) : load_animation("animation.xml", "target_node_id", <width>, <height>);

Ajout règles dans le fichier css/css.css.

Le chemin du background donné dans le XML est relatif au fichier XML (ou absolu).

Passage en *instanciation-case* -> il faut dessiner les objets sur un dessin, et non plus directement dans le default canvas.

Résumé
======

Une animation est décrite en XML par des objets de dessin et au maximum un programme associé à chaque objet.
Il faut lire ce XML, afficher les objets de dessin et exécuter les programmes.

Le framework P5.js permet de dessiner des figures. Les figures ne sont pas des éléments HTML récupérables, et sont dessinés à chaque itération du canevas.
Il faut donc un tableau de figures.

Les programmes de chaque objet de dessin sont à exécuter en parallèle, mais leurs instructions sont séquentielles.
Il faut donc un tableau de programmes.

Ainsi, nous avons une classe par objet et par intruction, comme la version orginale codée en Java.
Un programme principal lit un XML donné et met les objets du dessin dans un tableau associatif (identifiant : Object), ainsi que les programmes dans un tableau associatif (identifiant : Program).
Les objets sont capable de se dessiner (en une méthode qui sera appelée par le programme principal), en appelant les fonctions de dessin de p5.js.
